for (alpha in alphas) {
res <- MultiPower(X, Y, type = list(mRNA=2,miRNA=2),
alpha = alpha)
vals <- c(vals, res$optimalSampleSize$n)
}
plot(vals, type = "l", x = alphas,
xlab = "alpha", ylab = "PSS (Complete)")
vals <- c()
alphas <- seq(0.01, 0.2, 0.02)
for (alpha in alphas) {
res <- MultiPower(X, Y, type = list(mRNA=2,miRNA=2),
alpha = alpha)
vals <- c(vals, res$optimalSampleSize$n)
}
plot(vals, type = "l", x = alphas,
xlab = "alpha", ylab = "PSS (Complete)")
vals <- c()
fdrs <- seq(0.01, 0.2, 0.02)
for (fdr in fdrs) {
res <- MultiPower(X, Y, type = list(mRNA=2,miRNA=2),
fdr = fdr)
vals <- c(vals, res$optimalSampleSize$n)
}
plot(vals, type = "l", x = fdr,
xlab = "fdr", ylab = "PSS (Complete)")
vals
fdrs
plot(y=vals, type = "l", x = fdr,
xlab = "fdr", ylab = "PSS (Complete)")
length(vals)
length(fdrs)
plot(vals, type = "l", x = alphas,
xlab = "alpha", ylab = "PSS (Complete)")
plot(y=vals, type = "l", x = fdr,
xlab = "fdr", ylab = "PSS (Complete)")
plot(y=vals, type = "l", x = fdrs,
xlab = "fdr", ylab = "PSS (Complete)")
DF <- readRDS("Final.Data/Iv.DV.DF.rda")
library(nnet)
library(mlogit)
library(caret)
library(ggpubr)
library(glmnet)
library(dplyr)
library(naivebayes)
library(arules)
library(class)
library(rpart)
library(randomForest)
library(e1071)
library(kableExtra)
### ======================================================================== ###
### ------------------------------- DIRECTORY ------------------------------ ###
### ======================================================================== ###
setwd("C:/Users/Work/Desktop/Research/Phytophthora Dieback/Data")
source("Rfiles/Helpers.R")
### ======================================================================== ###
### -------------------------- READ IN INPUT DATA -------------------------- ###
### ======================================================================== ###
DF <- readRDS("Final.Data/Iv.DV.DF.rda")
DF
source("Helpers.R")
setwd("C:/Users/Work/Desktop/P.cinnamomi ML Mapping/Analysis")
source("Helpers.R")
Blue.Raster <- raster("Data/Spatial.Data/Clipped.Blue.tif")
plot(Blue.Raster)
sunData <- data.frame(as.matrix(read_excel("Data/Sun.Data/Sun2022.xlsx")))
sunData
All.Raster.DFs <- readRDS("Data/All.Raster.DFs.rda")
All.Raster.DFs
names(All.Raster.DFs)
All.Raster.DFs$Blue
readRDS("Data/IV.DV.DF.rda")
dim(readRDS("Data/IV.DV.DF.rda"))
names(readRDS("Data/IV.DV.DF.rda"))
dim(readRDS("Data/Predictors.rda"))
?spTransform
# extract site 1 data sheets from xlsx
d.sheet1 <- data.frame(as.matrix(read_excel("Labelled.Input.Data/Raw.Site.1.Data.xlsx")))
# extract site 1 data sheets from xlsx
d.sheet1 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx")))
# remove NAs
which(is.na(d.sheet1), arr.ind = T)
dim(d.sheet.1)
dim(d.sheet1)
d.sheet1
d.sheet2 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx", sheet = 2)))
length(805:1060)
# rows corresponding to the desired polygon of points
# -1 due to conversion from excel to dataframe
polygon.rows <- 805:1060 - 1
points.of.polygon <- cbind(d.sheet2[polygon.rows, c(13, 12)], rep("P", length(polygon.rows)))
points.of.polygon
d.sheet1 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx")))
d.sheet2 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx", sheet = 2)))
# extract site 2 data sheets from xlsx
d.sheet3 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.2.Data.xlsx")))
### ------------------------------ d.sheet1 -------------------------------- ###
# remove NAs
which(is.na(d.sheet1), arr.ind = T) # showed rows 151 & 152 have NAs
d.sheet1 <- d.sheet1[1:150,]
site1.in.polygon <- d.sheet1[, c(5, 4, 2)] # extract long, lat and disease
colnames(site1.in.polygon) <- c("long", "lat", "disease")
### ------------------------------ d.sheet2 -------------------------------- ###
# rows corresponding to the desired polygon of points
# -1 due to conversion from excel to dataframe
polygon.rows <- 805:1060 - 1
# all points of this polygon are post infested, hence extract long & lat
site1.of.polygon <- cbind(d.sheet2[polygon.rows, c(13, 12)], rep("P", length(polygon.rows)))
colnames(site1.of.polygon) <- c("long", "lat", "disease")
### ------------------------------ d.sheet3 -------------------------------- ###
# extract long, lat and disease
site2.polygon <- d.sheet3[, c(5, 4, 1)]
colnames(site2.polygon) <- c("long", "lat", "disease")
# bring class labels in line with site 1 data
site2.polygon$disease[second.recording$disease == "Active Dieback front"] <- "A"
site2.polygon$disease[second.recording$disease == "Post Infested"] <- "P"
site2.polygon$disease[second.recording$disease == "Dieback free"] <- "N"
which(is.na(second.recording)) # check for NAs (there are none)
### ======================================================================== ###
### -------------------------- SAVE LABELLED DATA -------------------------- ###
### ======================================================================== ###
write.csv(site1.in.polygon, file="Labelled.Data/site1.in.polygon.csv")
write.csv(site1.of.polygon, file="Labelled.Data/site1.of.polygon.csv")
write.csv(site2.polygon, file="Labelled.Data/site2.polygon.csv")
# extract site 1 data sheets from xlsx
d.sheet1 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx")))
d.sheet2 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.1.Data.xlsx", sheet = 2)))
# extract site 2 data sheets from xlsx
d.sheet3 <- data.frame(as.matrix(read_excel("Data/Labelled.Input.Data/Raw.Site.2.Data.xlsx")))
# remove NAs
which(is.na(d.sheet1), arr.ind = T) # showed rows 151 & 152 have NAs
d.sheet1 <- d.sheet1[1:150,]
site1.in.polygon <- d.sheet1[, c(5, 4, 2)] # extract long, lat and disease
colnames(site1.in.polygon) <- c("long", "lat", "disease")
# rows corresponding to the desired polygon of points
# -1 due to conversion from excel to dataframe
polygon.rows <- 805:1060 - 1
# all points of this polygon are post infested, hence extract long & lat
site1.of.polygon <- cbind(d.sheet2[polygon.rows, c(13, 12)], rep("P", length(polygon.rows)))
colnames(site1.of.polygon) <- c("long", "lat", "disease")
# extract long, lat and disease
site2.polygon <- d.sheet3[, c(5, 4, 1)]
colnames(site2.polygon) <- c("long", "lat", "disease")
# bring class labels in line with site 1 data
site2.polygon$disease[second.recording$disease == "Active Dieback front"] <- "A"
# bring class labels in line with site 1 data
site2.polygon$disease[site2.polygon$disease == "Active Dieback front"] <- "A"
site2.polygon$disease[site2.polygon$disease == "Post Infested"] <- "P"
site2.polygon$disease[site2.polygon$disease == "Dieback free"] <- "N"
site2.polygon
which(is.na(site2.polygon)) # check for NAs (there are none)
d.sheet1 <- data.frame(as.matrix(read_excel("Data/Labelled.Data/Raw.Site.1.Data.xlsx")))
d.sheet2 <- data.frame(as.matrix(read_excel("Data/Labelled.Data/Raw.Site.1.Data.xlsx", sheet = 2)))
# extract site 2 data sheets from xlsx
d.sheet3 <- data.frame(as.matrix(read_excel("Data/Labelled.Data/Raw.Site.2.Data.xlsx")))
### ------------------------------ d.sheet1 -------------------------------- ###
# remove NAs
which(is.na(d.sheet1), arr.ind = T) # showed rows 151 & 152 have NAs
d.sheet1 <- d.sheet1[1:150,]
site1.in.polygon <- d.sheet1[, c(5, 4, 2)] # extract long, lat and disease
colnames(site1.in.polygon) <- c("long", "lat", "disease")
### ------------------------------ d.sheet2 -------------------------------- ###
# rows corresponding to the desired polygon of points
# -1 due to conversion from excel to dataframe
polygon.rows <- 805:1060 - 1
# all points of this polygon are post infested, hence extract long & lat
site1.of.polygon <- cbind(d.sheet2[polygon.rows, c(13, 12)], rep("P", length(polygon.rows)))
colnames(site1.of.polygon) <- c("long", "lat", "disease")
### ------------------------------ d.sheet3 -------------------------------- ###
# extract long, lat and disease
site2.polygon <- d.sheet3[, c(5, 4, 1)]
colnames(site2.polygon) <- c("long", "lat", "disease")
# bring class labels in line with site 1 data
site2.polygon$disease[site2.polygon$disease == "Active Dieback front"] <- "A"
site2.polygon$disease[site2.polygon$disease == "Post Infested"] <- "P"
site2.polygon$disease[site2.polygon$disease == "Dieback free"] <- "N"
which(is.na(site2.polygon)) # check for NAs (there are none)
### ======================================================================== ###
### -------------------------- SAVE LABELLED DATA -------------------------- ###
### ======================================================================== ###
### ---------------------------- Save per site ----------------------------- ###
# write.csv(site1.in.polygon, file="Data/site1.in.polygon.csv")
# write.csv(site1.of.polygon, file="Labelled.Data/site1.of.polygon.csv")
# write.csv(site2.polygon, file="Labelled.Data/site2.polygon.csv")
### --------------------------- Save per class ----------------------------- ###
# active.points <- all.points[all.points$disease=="A", ]
# post.points <- all.points[all.points$disease=="P", ]
# free.points <- all.points[all.points$disease=="N", ]
#
# write.csv(active.points, file="Labelled.Data/Subsets/active.points.csv")
# write.csv(post.points, file="Labelled.Data/Subsets/post.points.csv")
# write.csv(free.points, file="Labelled.Data/Subsets/free.points.csv")
### --------------------------- Save all ------------------------------ ###
all.points <- rbind(points.in.polygon, points.of.polygon, second.recording)
all.points <- rbind(site1.in.polygon, site1.of.polygon, site2.polygon)
write.csv(all.points, file="Data/Labelled.Data/all.Points.csv")
all.points
write.csv(all.points, file="Data/Labelled.Data/Long.Lat.Class.csv")
Desired.CRS <- crs(raster("Data/Spatial.Data/Clipped.DEM.tif"))
IVs.DF <- readRDS("Data/All.Raster.DFs.rda") # 24.4MB
input.DV.DF <- read.csv("Data/Labelled.Data/Long.Lat.Class.csv")[, 2:4]
IVs.DF
DV.DF <- read.csv("Data/Labelled.Data/Long.Lat.Class.csv")[, 2:4]
DV.DF
colnames(IVs.DF)
IVs.DF
load("C:/Users/Work/Desktop/Research/Phytophthora Dieback/Data/Spatial.Data/Long.Format.Data/IVs.DF.rda")
names(IVs.DF)
CondenseRasterDFs(IVs.DF)
IVs.DF <- CondenseRasterDFs(readRDS("Data/All.Raster.DFs.rda"))
for(r in 1:nrow(IV.DV.DF)) { # 1:446
for (var in colnames(IVs.DF)[3:21]) {
point <- c(IV.DV.DF$long[[r]], IV.DV.DF$lat[[r]])
rows.x <- which(round(abs(point[1]-IVs.DF$long)) == min(round(abs(point[1]-IVs.DF$long))))
rows.y <- which(round(abs(point[2]-IVs.DF$lat)) == min(round(abs(point[2]-IVs.DF$lat))))
IV.DV.DF[r, var] <- mean(IVs.DF[intersect(rows.x, rows.y), var])
}
cat("\r", r)
}
Desired.CRS <- crs(raster("Data/Spatial.Data/Clipped.DEM.tif"))
IVs.DF <- CondenseRasterDFs(readRDS("Data/All.Raster.DFs.rda"))
DV.DF <- read.csv("Data/Labelled.Data/Long.Lat.Class.csv")[, 2:4]
### ======================================================================== ###
# convert labels to integer
DV.DF$disease[DV.DF$disease=="A"] <- 1
DV.DF$disease[DV.DF$disease=="P"] <- 2
DV.DF$disease[DV.DF$disease=="N"] <- 3
# clean row names
DV.DF <- DV.DF[-which(duplicated(DV.DF)),]
rownames(DV.DF) <- 1:nrow(DV.DF)
### ======================================================================== ###
# adjust coordinate reference system
pts <- SpatialPointsDataFrame(coords = DV.DF[,c(1,2)], data = DV.DF,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
pts.lyr <- spTransform(pts, Desired.CRS)
### ======================================================================== ###
# combine IV and DV dataframes
IV.DV.DF <- DV.DF
IV.DV.DF$long <- pts.lyr$long
IV.DV.DF$lat <- pts.lyr$lat
# convert long and lat to x and y
IV.DV.DF$x <- floor(pts.lyr$long - min(IVs.DF$long))
IV.DV.DF$y <- floor(pts.lyr$lat - min(IVs.DF$lat))
IV.DV.DF$disease <- as.numeric(IV.DV.DF$disease) # ensure not factor
IV.DV.DF <- IV.DV.DF[, c(1,2,4,5,3)]
IV.DV.DF
for(r in 1:nrow(IV.DV.DF)) { # 1:446
for (var in colnames(IVs.DF)[3:21]) {
point <- c(IV.DV.DF$long[[r]], IV.DV.DF$lat[[r]])
rows.x <- which(round(abs(point[1]-IVs.DF$long)) == min(round(abs(point[1]-IVs.DF$long))))
rows.y <- which(round(abs(point[2]-IVs.DF$lat)) == min(round(abs(point[2]-IVs.DF$lat))))
IV.DV.DF[r, var] <- mean(IVs.DF[intersect(rows.x, rows.y), var])
}
cat("\r", r)
break
}
IV.DV.DF
scaled.IV.DV.DF <- IV.DV.DF <- readRDS("Data/Labelled.Predictors.rda")
scaled.IV.DV.DF
scaled.IV.DV.DF[, 6:24] <- scale(IV.DV.DF[, 6:24])
scaled.IV.DV.DF$disease[which(scaled.IV.DV.DF$disease==1)] <- "A"
scaled.IV.DV.DF$disease[which(scaled.IV.DV.DF$disease==2)] <- "P"
scaled.IV.DV.DF$disease[which(scaled.IV.DV.DF$disease==3)] <- "N"
scaled.DV.DF <- scaled.IV.DV.DF[, -c(1,2,3,4,5)]
DF <- readRDS("Data/Labelled.Predictors.rda")
DF
knn.metrics <- readRDS("Metrics/kNN/knn.metrics.rda")
PlotOneModelMetrics(knn.metrics$Basic, "KNN",
c("Specificity", "Sensitivity", "Precision", "F1", "Balanced Accuracy"),
title = "KNN, Basic Model Metrics")
knn.metrics.2 <- knn.metrics
knn.metrics.2$MNLR <- mnlr.metrics$Standard
knn.metrics.2 <- knn.metrics.2[c(5,1,2,3,4)]
PlotMultipleModelMetrics(knn.metrics.2,
title = "KNN, All Model Metrics",
plot.type="dot")
knn.metrics <- readRDS("Metrics/kNN/knn.metrics.rda")
PlotOneModelMetrics(knn.metrics$Basic, "KNN",
c("Specificity", "Sensitivity", "Precision", "F1", "Balanced Accuracy"),
title = "KNN, Basic Model Metrics")
PlotOneModelMetrics(knn.metrics$Euclidean, "KNN",
c("Specificity", "Sensitivity", "Precision", "F1", "Balanced Accuracy"),
title = "KNN, Euclidean Model Metrics")
PlotOneModelMetrics(knn.metrics$Manhattan, "KNN",
c("Specificity", "Sensitivity", "Precision", "F1", "Balanced Accuracy"),
title = "KNN, Manhattan Model Metrics")
PlotOneModelMetrics(knn.metrics$Minkowski, "KNN",
c("Specificity", "Sensitivity", "Precision", "F1", "Balanced Accuracy"),
title = "KNN, Minkowski Model Metrics")
knn.metrics.2 <- knn.metrics
knn.metrics.2$MNLR <- mnlr.metrics$Standard
# ENSURE THIS LINE RUNS BEFORE ANY USE OF PlotMultiplemodelMetrics()
mnlr.metrics <- readRDS("Metrics/MNLR/mnlr.metrics.rda")
knn.metrics.2$MNLR <- mnlr.metrics$Standard
knn.metrics.2 <- knn.metrics.2[c(5,1,2,3,4)]
PlotMultipleModelMetrics(knn.metrics.2,
title = "KNN, All Model Metrics",
plot.type="dot")
dt.metrics <- readRDS("Metrics/DT/dt.metrics.rda")
rf.metrics <- readRDS("Metrics/RF/rf.metrics.rda")
rf.gini.opt.imps <- WeightedAverage(rf.DF$disease, rf.metrics$Optimised$importance)
rf.gini.opt.imps <- rf.gini.opt.imps + ((100-sum(rf.gini.opt.imps))/19)
rf.gini.opt.imps <- rf.gini.opt.imps/max(rf.gini.opt.imps) * 100
PlotModelFeatImp(rf.gini.opt.imps, type="RF", title="Importance of features in RF, Optimised model")
rf.DF <- scaled.DF[, -c(1,2,3,4)]
rf.gini.opt.imps <- WeightedAverage(rf.DF$disease, rf.metrics$Optimised$importance)
DF <- readRDS("Data/Labelled.Predictors.rda")
DF$disease[which(DF$disease==1)] <- "A" # convert class back to character
DF$disease[which(DF$disease==2)] <- "P"
DF$disease[which(DF$disease==3)] <- "N"
scaled.DF <- DF
scaled.DF[, 6:24] <- scale(scaled.DF[, 6:24]) # scale all predictors
rf.DF <- scaled.DF[, -c(1,2,3,4)]
rf.gini.opt.imps <- WeightedAverage(rf.DF$disease, rf.metrics$Optimised$importance)
rf.gini.opt.imps <- rf.gini.opt.imps + ((100-sum(rf.gini.opt.imps))/19)
rf.gini.opt.imps <- rf.gini.opt.imps/max(rf.gini.opt.imps) * 100
PlotModelFeatImp(rf.gini.opt.imps, type="RF", title="Importance of features in RF, Optimised model")
Blue.Raster <- raster("Data/Spatial.Data/Clipped.Blue.tif")
Green.Raster <- raster("Data/Spatial.Data/Clipped.Green.tif")
Red.Raster <- raster("Data/Spatial.Data/Clipped.Red.tif")
NIR.Raster <- raster("Data/Spatial.Data/Clipped.NIR.tif")
SWIR1.Raster <- raster("Data/Spatial.Data/Clipped.SWIR1.tif")
SWIR2.Raster <- raster("Data/Spatial.Data/Clipped.SWIR2.tif")
### ---------------------------- Brightness Temp. -------------------------- ###
TIRS1.Raster <- raster("Data/Spatial.Data/Clipped.TIRS1.tif")
TIRS2.Raster <- raster("Data/Spatial.Data/Clipped.TIRS2.tif")
### -------------------------- Terrain Properties -------------------------- ###
Aspect.Raster <- raster("Data/Spatial.Data/Clipped.Aspect.tif")
Slope.Raster <- raster("Data/Spatial.Data/Clipped.Slope.tif")
### ------------------------------- TPI & DEM ------------------------------ ###
DEM.Raster <- raster("Data/Spatial.Data/Clipped.DEM.tif")
TPI100.Raster <- raster("Data/Spatial.Data/Clipped.TPI100.tif")
TPI1000.Raster <- raster("Data/Spatial.Data/Clipped.TPI1000.tif")
### -------------------------- SUN POSITION DATA --------------------------- ###
sunData <- data.frame(as.matrix(read_excel("Data/Sun.Data/Sun2022.xlsx")))
sunData <- ReduceSunData(sunData)
### ======================================================================== ###
### ------------------------------- PROJECTION ----------------------------- ###
### ======================================================================== ###
All.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster,
Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
Reflectance.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster)
Geo.Rasters <- list(Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
# reproject all reflectance rasters to bring in line with geo rasters
Blue.Raster <- projectRaster(Blue.Raster, DEM.Raster)
Green.Raster <- projectRaster(Green.Raster, DEM.Raster)
Red.Raster <- projectRaster(Red.Raster, DEM.Raster)
NIR.Raster <- projectRaster(NIR.Raster, DEM.Raster)
SWIR1.Raster <- projectRaster(SWIR1.Raster, DEM.Raster)
SWIR2.Raster <- projectRaster(SWIR2.Raster, DEM.Raster)
TIRS1.Raster <- projectRaster(TIRS1.Raster, DEM.Raster)
TIRS2.Raster <- projectRaster(TIRS2.Raster, DEM.Raster)
All.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster,
Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
Reflectance.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster)
Blue.Raster <- raster("Data/Spatial.Data/Clipped.Blue.tif")
Green.Raster <- raster("Data/Spatial.Data/Clipped.Green.tif")
Red.Raster <- raster("Data/Spatial.Data/Clipped.Red.tif")
NIR.Raster <- raster("Data/Spatial.Data/Clipped.NIR.tif")
SWIR1.Raster <- raster("Data/Spatial.Data/Clipped.SWIR1.tif")
SWIR2.Raster <- raster("Data/Spatial.Data/Clipped.SWIR2.tif")
### ---------------------------- Brightness Temp. -------------------------- ###
TIRS1.Raster <- raster("Data/Spatial.Data/Clipped.TIRS1.tif")
TIRS2.Raster <- raster("Data/Spatial.Data/Clipped.TIRS2.tif")
### -------------------------- Terrain Properties -------------------------- ###
Aspect.Raster <- raster("Data/Spatial.Data/Clipped.Aspect.tif")
Slope.Raster <- raster("Data/Spatial.Data/Clipped.Slope.tif")
### ------------------------------- TPI & DEM ------------------------------ ###
DEM.Raster <- raster("Data/Spatial.Data/Clipped.DEM.tif")
TPI100.Raster <- raster("Data/Spatial.Data/Clipped.TPI100.tif")
TPI1000.Raster <- raster("Data/Spatial.Data/Clipped.TPI1000.tif")
### -------------------------- SUN POSITION DATA --------------------------- ###
sunData <- data.frame(as.matrix(read_excel("Data/Sun.Data/Sun2022.xlsx")))
sunData <- ReduceSunData(sunData)
### ======================================================================== ###
### ------------------------------- PROJECTION ----------------------------- ###
### ======================================================================== ###
All.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster,
Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
Reflectance.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster)
Geo.Rasters <- list(Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
# reproject all reflectance rasters to bring in line with geo rasters
Blue.Raster <- projectRaster(Blue.Raster, DEM.Raster)
Green.Raster <- projectRaster(Green.Raster, DEM.Raster)
Red.Raster <- projectRaster(Red.Raster, DEM.Raster)
NIR.Raster <- projectRaster(NIR.Raster, DEM.Raster)
SWIR1.Raster <- projectRaster(SWIR1.Raster, DEM.Raster)
SWIR2.Raster <- projectRaster(SWIR2.Raster, DEM.Raster)
TIRS1.Raster <- projectRaster(TIRS1.Raster, DEM.Raster)
TIRS2.Raster <- projectRaster(TIRS2.Raster, DEM.Raster)
All.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster,
Aspect.Raster=Aspect.Raster,
Slope.Raster=Slope.Raster,
DEM.Raster=DEM.Raster,
TPI100.Raster=TPI100.Raster,
TPI1000.Raster=TPI1000.Raster)
Reflectance.Rasters <- list(Blue.Raster=Blue.Raster,
Green.Raster=Green.Raster,
Red.Raster=Red.Raster,
NIR.Raster=NIR.Raster,
SWIR1.Raster=SWIR1.Raster,
SWIR2.Raster=SWIR2.Raster,
TIRS1.Raster=TIRS1.Raster,
TIRS2.Raster=TIRS2.Raster)
Blue.DF <- Extract.RasterValues.To.LongDF(Blue.Raster)
Green.DF <- Extract.RasterValues.To.LongDF(Green.Raster)
Red.DF <- Extract.RasterValues.To.LongDF(Red.Raster)
NIR.DF <- Extract.RasterValues.To.LongDF(NIR.Raster)
SWIR1.DF <- Extract.RasterValues.To.LongDF(SWIR1.Raster)
SWIR2.DF <- Extract.RasterValues.To.LongDF(SWIR2.Raster)
### ---------------------------- Brightness Temp. -------------------------- ###
TIRS1.DF <- Extract.RasterValues.To.LongDF(TIRS1.Raster)
TIRS2.DF <- Extract.RasterValues.To.LongDF(TIRS2.Raster)
### -------------------------- Terrain Properties -------------------------- ###
Aspect.DF <- Extract.RasterValues.To.LongDF(Aspect.Raster)
Slope.DF <- Extract.RasterValues.To.LongDF(Slope.Raster)
### ------------------------------- TPI & DEM ------------------------------ ###
DEM.DF <- Extract.RasterValues.To.LongDF(DEM.Raster)
TPI100.DF <- Extract.RasterValues.To.LongDF(TPI100.Raster)
TPI1000.DF <- Extract.RasterValues.To.LongDF(TPI1000.Raster)
source("Internals/Internals.Processing.Feat.Eng.R")
setwd("C:/Users/Work/Desktop/P.cinnamomi ML Mapping/Analysis")
source("Internals/Internals.Processing.Feat.Eng.R")
source("Internals/Internals.Processing.FeatEng.R")
Slope.DF <- Extract.RasterValues.To.LongDF(Slope.Raster)
Slope.DF
sunData <- data.frame(as.matrix(read_excel("Data/Sun.Data/Sun2022.xlsx")))
sunData <- ReduceSunData(sunData)
sunData
# -- Potential Relative Radiation (mean HillShade) -- #
PRR.DF <- CalculatePRR(Slope.DF, Aspect.DF, sunData)
Aspect.DF <- Extract.RasterValues.To.LongDF(Aspect.Raster)
# -- Potential Relative Radiation (mean HillShade) -- #
PRR.DF <- CalculatePRR(Slope.DF, Aspect.DF, sunData)
All.Raster.DFs <- readRDS("Data/All.Raster.DFs.rda")
All.Raster.DFs$Aspect
All.Raster.DFs$PRR
sunData <- data.frame(as.matrix(read_excel("Data/Sun.Data/Sun2022.xlsx")))
sunData
sunData <- ReduceSunData(sunData)
sunData
?pheatmap
